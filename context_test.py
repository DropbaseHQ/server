# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-04-18T02:48:11+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class PageDisplayProperties(BaseModel):
    message: Optional[str] = Field(None, title="Message")
    message_type: Optional[str] = Field(None, title="Message Type")


class TableColumn(BaseModel):
    name: str = Field(..., title="Name")
    column_type: str = Field(..., title="Column Type")
    data_type: str = Field(..., title="Data Type")
    display_type: str = Field(..., title="Display Type")


class Type(Enum):
    python = "python"
    postgres = "postgres"
    mysql = "mysql"
    snowflake = "snowflake"
    sqlite = "sqlite"


class TableData(BaseModel):
    type: Optional[Type] = Field(None, title="Type")
    columns: Optional[List[TableColumn]] = Field(None, title="Columns")
    data: Optional[List[List]] = Field(None, title="Data")


class Table1ColumnsContext(BaseModel):
    pass


class Table1Context(BaseModel):
    data: Optional[TableData] = None
    message: Optional[str] = Field(None, title="Message")
    message_type: Optional[str] = Field(None, title="Message Type")
    reload: Optional[bool] = Field(False, title="Reload")
    columns: Table1ColumnsContext


class ButtonContextProperty(BaseModel):
    visible: Optional[bool] = Field(None, title="Visible")


class InputContextProperty(BaseModel):
    visible: Optional[bool] = Field(None, title="Visible")


class Widget1ComponentsContext(BaseModel):
    button1: ButtonContextProperty
    input1: InputContextProperty


class Widget1Context(BaseModel):
    message: Optional[str] = Field(None, title="Message")
    message_type: Optional[str] = Field(None, title="Message Type")
    components: Widget1ComponentsContext


class Context(BaseModel):
    page: PageDisplayProperties
    table1: Table1Context
    widget1: Widget1Context
